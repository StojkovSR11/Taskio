version: '3.8'

services:
  user-service:
    build: ./user-service
    ports:
      - "${USER_SERVICE_PORT:-8080}:8080"
    depends_on:
      - mongo
    environment:
      - MONGO_URI=${MONGO_URI:-mongodb://mongo:27017/testdb}
      - ENABLE_BOOTSTRAP=${ENABLE_BOOTSTRAP:-true}
    networks:
      - app-network
    volumes:
      - user-mongo_store:/data/db

  project-service:
    build: ./project-service
    ports:
      - "${PROJECT_SERVICE_PORT:-8081}:8080"
    depends_on:
      - nats
      - mongo
      - user-service
    environment:
      - NATS_URL=${NATS_URL:-nats://nats:4222}
      - MONGO_URI=${MONGO_URI:-mongodb://mongo:27017/testdb}
      - ENABLE_BOOTSTRAP=${ENABLE_BOOTSTRAP:-true}
    networks:
      - app-network
    volumes:
      - project-mongo_store:/data/db

  task-service:
    build: ./task-service
    ports:
      - "${TASK_SERVICE_PORT:-8082}:8080"
    depends_on:
      - mongo
      - nats
    environment:
      - NATS_URL=${NATS_URL:-nats://nats:4222}
      - MONGO_URI=${MONGO_URI:-mongodb://mongo:27017/testdb}
      - ENABLE_BOOTSTRAP=${ENABLE_BOOTSTRAP:-true}
    networks:
      - app-network
    volumes:
      - task-mongo_store:/data/db

  mongo:
    image: mongo:latest
    ports:
      - "${MONGO_PORT:-27017}:27017"
    networks:
      - app-network

  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    depends_on:
      - user-service
      - project-service
      - task-service
      - notification-service
    networks:
      - app-network
    environment:
      - NGINX_HTTP_PORT=${NGINX_HTTP_PORT:-80}
      - NGINX_HTTPS_PORT=${NGINX_HTTPS_PORT:-443}
      - NGINX_SERVER_NAME=${NGINX_SERVER_NAME:-localhost}
      - SSL_CERTIFICATE_PATH=${SSL_CERTIFICATE_PATH:-/etc/nginx/certs/server.crt}
      - SSL_CERTIFICATE_KEY_PATH=${SSL_CERTIFICATE_KEY_PATH:-/etc/nginx/certs/server.key}
      - USER_SERVICE_HOST=${USER_SERVICE_HOST:-user-service}
      - USER_SERVICE_PORT=${USER_SERVICE_PORT:-8080}
      - PROJECT_SERVICE_HOST=${PROJECT_SERVICE_HOST:-project-service}
      - PROJECT_SERVICE_PORT=${PROJECT_SERVICE_PORT:-8081}
      - TASK_SERVICE_HOST=${TASK_SERVICE_HOST:-task-service}
      - TASK_SERVICE_PORT=${TASK_SERVICE_PORT:-8082}
      - NOTIFICATION_SERVICE_HOST=${NOTIFICATION_SERVICE_HOST:-notification-service}
      - NOTIFICATION_SERVICE_PORT=${NOTIFICATION_SERVICE_PORT:-8083}


  notification-service:
    build: ./notification-service
    restart: always
    ports:
      - "${NOTIFICATION_SERVICE_PORT:-8083}:8080"
    environment:
      - CASSANDRA_HOST=${CASSANDRA_HOST:-cassandra}
      - CASSANDRA_PORT=${CASSANDRA_PORT:-9042}
      - CASSANDRA_KEYSPACE=${CASSANDRA_KEYSPACE:-notifications}
    depends_on:
      cassandra:
        condition: service_healthy
      nats:
        condition: service_started
    networks:
      - app-network
    volumes:
      - cass_store:/var/lib/cassandra/data

  cassandra:
    image: cassandra:4.0
    restart: always
    container_name: "cassandra"
    hostname: "cassandra"
    ports:
      - "${CASSANDRA_PORT:-9042}:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=${CASSANDRA_CLUSTER_NAME:-CassandraCluster}
      - CASSANDRA_DC=${CASSANDRA_DC:-DC1}
      - CASSANDRA_RACK=${CASSANDRA_RACK:-RAC1}
      - CASSANDRA_LISTENER_RPC_ADDRESS=${CASSANDRA_LISTENER_RPC_ADDRESS:-0.0.0.0}
    healthcheck:
      test: ["CMD", "cqlsh", "--username", "cassandra", "--password", "cassandra", "--execute", "describe keyspaces"]
      interval: 15s
      retries: 5
      timeout: 15s
    volumes:
      - cass_store:/var/lib/cassandra
    networks:
      - app-network

  nats:
    image: 'nats:latest'
    expose:
      - ${NATS_PORT:-4222}
    ports:
      - ${NATS_PORTS:-4222:4222}
    networks:
      - app-network

volumes:
  task-mongo_store:
  project-mongo_store:
  user-mongo_store:
  cass_store:

networks:
  app-network:
    driver: bridge
